name: Build Installer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Remove old Inno Setup (if exists)
        run: |
          if (Test-Path "C:\Program Files (x86)\Inno Setup 6") {
            Remove-Item "C:\Program Files (x86)\Inno Setup 6" -Recurse -Force
          }

      - name: Download Inno Setup
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "innosetup.exe"
          Start-Process innosetup.exe -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait

      - name: Compile installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" Setup.iss

      - name: Generate release tag
        id: gen_tag
        shell: pwsh
        run: |
          $now = Get-Date -Format "yy.M.d.H"
          echo "tag=v$now" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.gen_tag.outputs.tag }}
          name: ""
          body: "Update Microsoft Visual C++ Redistributable packages 2015-2022"
          files: release/*.exe

      - name: Mark release as verified
        run: |
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }

          $releaseUrl = "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.gen_tag.outputs.tag }}"

          # Получаем информацию о релизе
          $release = Invoke-RestMethod -Uri $releaseUrl -Headers $headers -Method Get

          # Обновляем релиз, устанавливая make_latest в true (что добавляет галочку verified)
          $updateData = @{
            make_latest = $true
          } | ConvertTo-Json

          Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$($release.id)" -Headers $headers -Method Patch -Body $updateData -ContentType "application/json"

      - name: Clean up release folder
        run: |
          Remove-Item release -Recurse -Force